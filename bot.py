import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# –¢–≤–æ–π Telegram ID
ADMIN_ID = 301661957

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
QUESTION1, QUESTION2, POLL, PHONE = range(4)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        await update.message.reply_text(
            "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥. –ù–∞–ø–∏—à–∏ /cancel, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END

    user_data[user_id] = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–ü–æ–∫—É–ø–∫–∞/–∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã/–¥–æ–º–∞)"
    )
    return QUESTION1

# –ò–Ω—Ç–µ—Ä–µ—Å
async def question1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]['interest'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥?")
    return QUESTION2

# –ì–æ—Ä–æ–¥
async def question2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]['city'] = update.message.text

    reply_keyboard = [["–î–æ 1000‚Ç¨", "–î–æ 2000‚Ç¨", "–û—Ç 2000‚Ç¨"]]
    await update.message.reply_text(
        "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return POLL

# –ë—é–¥–∂–µ—Ç
async def poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]['budget'] = update.message.text

    data = user_data[user_id]
    summary = (
        f"–í–æ—Ç —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª:\n\n"
        f"üß† –ò–Ω—Ç–µ—Ä–µ—Å: {data['interest']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üí∂ –ë—é–¥–∂–µ—Ç: {data['budget']}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )

    contact_button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(summary, reply_markup=reply_markup)

    return PHONE

# –¢–µ–ª–µ—Ñ–æ–Ω
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    contact = update.message.contact.phone_number if update.message.contact else update.message.text
    user_data[user_id]['phone'] = contact

    data = user_data[user_id]

    username = update.effective_user.username or update.effective_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    text = (
        f"üì• –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç @{username}:\n\n"
        f"üß† –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è: {data['interest']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üí∂ –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è üí¨")

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    user_data.pop(user_id, None)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data.pop(user_id, None)
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, question1)],
            QUESTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, question2)],
            POLL: [MessageHandler(filters.TEXT & ~filters.COMMAND, poll)],
            PHONE: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_polling() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π –≤ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
